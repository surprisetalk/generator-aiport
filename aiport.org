
* TODOS
- [ ] generation
  - [ ] extensions
    - [ ] yo aiport-extension <extension-name>
  - [ ] templates
    - [ ] yo aiport-template <template-name>
  - [ ] plugins
    - [ ] yo aiport-plugin <plugin-name>
  - [ ] modules
    - [ ] yo aiport-module <module-name>
- [ ] server (api)
  - [ ] yo meanjs:mean-module panel
  - [ ] yo meanjs:express-model configs
  - [ ] yo meanjs:express-model modules
  - [ ] yo meanjs:express-model pages
  - [ ] yo meanjs:express-model extensions
  - [ ] yo meanjs:express-model plugins
  - [ ] yo meanjs:express-model templates
- [ ] client
  - [ ] yo meanjs:angular-module panel


* INTERACTION
- Welcome!
- Name your project: ______
- [ composeWith('meanjs',{options:{...}}) ]
- [ clone aiport-panel into /modules ]
- [ npm install ]
  - + aiport-module-customers
  - + aiport-module-orders
  - + aiport-module-products
- All done! 
  - Start your project with grunt and navigate to http://localhost:3000.

    
* SPECS

** API

*** CONFIGS
- store configs, as you'd expect

*** MODULES
- "admins" is core
- "customers", "orders", and "products" are default
- distributed via npm with name "aiport-module-*"

*** PAGES
- pages have hierarchical endpoints that get loaded into express
- pages define which values/plugins get loaded into pages
  - { endpoint: "/", template: "product", modules: [ user, product ], plugins: { title: "welcome", aside: "paypal" } }
    - "modules" defines the arguments that the page needs to load
    - "modules" modules also defines which runtime-values you may use in plugins

*** EXTENSIONS
- extensions *should* be searched/downloaded through the admin panel
- extensions are essentially npm packages named "aiport-extension-*" with an "aiport" keyword
- the code should automatically require "aiport-extension-*" from node_modules
  - extensions will use things like this.init.push( λ ) and this.admin.tabs.( λ ) to inject behavior
- use default extensions in *core* rather than adding the features directly

*** TEMPLATES
- templates should be distributed similarly to extensions
- templates have "plugs" for plugins

*** PLUGINS
- plugins are what get injected into templates
- e.g. consider a header template
  - on the left side, a user may want to use a static string plugin to display the site-title
  - on the right side, a user may want to use a menu plugin
- e.g. consider a page template
  - in the body, one may use a product template to display a product
  - in the aside, one may want to have a stripe plugin
- idea: use bower to publish aiport plugins
  - available plugins would be those named "aiport-pludgin-*" in bower_packages
- plugins should have schemas that define their inputs
  - during configuration, admins can define static values or redirect runtime-values from the page

** CLIENT

*** PANEL
- module pages
- page builder
- extend
  - extension manager
  - module manager
  - plugin manager
  - template manager
- config
  - system config page
  - module config pages

*** FRONT
- dynamically routed and generated by injecting module data into plugins into templates
